import secrets
import string
import hashlib
import requests
from argparse import ArgumentParser

# Configuraci√≥n
class PasswordToolkit:
    def __init__(self):
        self.common_passwords_url = "https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt"
    
    def generar_contrase√±a(self, longitud=12, usar_simbolos=True, usar_mayusculas=True, usar_numeros=True):
        """Genera una contrase√±a segura con criterios personalizables."""
        caracteres = string.ascii_lowercase
        if usar_mayusculas:
            caracteres += string.ascii_uppercase
        if usar_numeros:
            caracteres += string.digits
        if usar_simbolos:
            caracteres += string.punctuation
        
        if not caracteres:
            raise ValueError("Debes habilitar al menos un tipo de car√°cter.")
        
        return ''.join(secrets.choice(caracteres) for _ in range(longitud))
    
    def es_contrase√±a_fuerte(self, contrase√±a, min_longitud=12, verificar_comun=True):
        """Valida la fortaleza de una contrase√±a."""
        if len(contrase√±a) < min_longitud:
            return False, f"‚ùå Longitud m√≠nima no alcanzada ({min_longitud} caracteres)."
        
        tiene_mayusculas = any(c.isupper() for c in contrase√±a)
        tiene_numeros = any(c.isdigit() for c in contrase√±a)
        tiene_simbolos = any(c in string.punctuation for c in contrase√±a)
        
        if not (tiene_mayusculas and tiene_numeros and tiene_simbolos):
            return False, "‚ùå Faltan may√∫sculas, n√∫meros o s√≠mbolos."
        
        if verificar_comun and self.es_contrase√±a_comun(contrase√±a):
            return False, "‚ùå La contrase√±a est√° en listas de contrase√±as comunes."
        
        return True, "‚úÖ Contrase√±a segura."
    
    def es_contrase√±a_comun(self, contrase√±a):
        """Verifica si la contrase√±a est√° en listas de contrase√±as vulneradas."""
        try:
            response = requests.get(self.common_passwords_url, timeout=5)
            common_passwords = response.text.splitlines()
            return contrase√±a in common_passwords
        except requests.RequestException:
            return False
    
    def hash_contrase√±a(self, contrase√±a, algoritmo='sha256'):
        """Genera el hash de una contrase√±a (√∫til para almacenamiento seguro)."""
        return hashlib.new(algoritmo, contrase√±a.encode()).hexdigest()

# CLI
def main():
    parser = ArgumentParser(description="üîê Generador y Validador de Contrase√±as Seguras")
    parser.add_argument("--generar", action="store_true", help="Genera una contrase√±a segura.")
    parser.add_argument("--validar", type=str, help="Valida la fortaleza de una contrase√±a.")
    parser.add_argument("--longitud", type=int, default=12, help="Longitud de la contrase√±a (default: 12).")
    parser.add_argument("--simbolos", action="store_true", help="Incluye s√≠mbolos en la contrase√±a.")
    args = parser.parse_args()
    
    toolkit = PasswordToolkit()
    
    if args.generar:
        contrase√±a = toolkit.generar_contrase√±a(
            longitud=args.longitud,
            usar_simbolos=args.simbolos
        )
        print(f"üîí Contrase√±a generada: {contrase√±a}")
        print(f"üîë Hash (SHA-256): {toolkit.hash_contrase√±a(contrase√±a)}")
    elif args.validar:
        es_segura, mensaje = toolkit.es_contrase√±a_fuerte(args.validar)
        print(mensaje)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
